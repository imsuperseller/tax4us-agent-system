{
  "name": "WordPress Content Agent Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "wordpress-content-agent",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "wordpress-content-agent-webhook"
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "prompt": "Generate SEO-optimized content about {{ $json.topic }} for a tax consulting website (tax4us.co.il). Include practical tips, actionable advice, and optimize for Israeli tax context. Target length: 800-1200 words with proper HTML formatting.",
        "options": {
          "temperature": 0.7,
          "maxTokens": 2000
        }
      },
      "id": "generate-content",
      "name": "Generate Content",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:8000/pages",
        "method": "POST",
        "authentication": "basicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "title",
              "value": "={{ $json.title }}"
            },
            {
              "name": "content",
              "value": "={{ $node['Generate Content'].json.choices[0].message.content }}"
            },
            {
              "name": "status",
              "value": "publish"
            },
            {
              "name": "type",
              "value": "page"
            }
          ]
        }
      },
      "id": "create-wordpress-page",
      "name": "Create WordPress Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "serverUrl": "http://localhost:8000/mcp",
        "tool": "create_page",
        "parameters": {
          "parameters": [
            {
              "name": "data",
              "value": "={{ { \"title\": $json.title, \"content\": $node['Generate Content'].json.choices[0].message.content, \"status\": \"publish\" } }}"
            }
          ]
        }
      },
      "id": "mcp-bridge",
      "name": "MCP Bridge",
      "type": "n8n-nodes-mcp.mcp",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": true, \"page_created\": $node['Create WordPress Page'].json, \"content_generated\": $node['Generate Content'].json.choices[0].message.content, \"mcp_result\": $node['MCP Bridge'].json } }}"
      },
      "id": "response",
      "name": "Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "error-check",
              "leftValue": "={{ $json.success }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "error-check",
      "name": "Error Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [780, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": false, \"error\": \"Failed to create WordPress page\", \"details\": $json } }}",
        "options": {
          "responseCode": 500
        }
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1000, 500]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Generate Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Content": {
      "main": [
        [
          {
            "node": "Create WordPress Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create WordPress Page": {
      "main": [
        [
          {
            "node": "MCP Bridge",
            "type": "main",
            "index": 0
          },
          {
            "node": "Error Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP Bridge": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Check": {
      "main": [
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "wordpress-content-agent-workflow"
}
